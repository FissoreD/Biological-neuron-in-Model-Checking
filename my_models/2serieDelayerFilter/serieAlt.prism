dtmc

const int power = 20;
const double fuite = 0.9;
const int threshold_s1 = 50;
const int threshold_s2 = 25;
const int threshold_s3 = 15;

module S3

    s3 : [0..1] init 0;        // 0 = inactif et 1 = spike
    pot_s3 : [0..200] init 0;  // potential of the neuron

    [s] s3=0 & pot_s3 <= threshold_s3 -> (pot_s3'=floor(pot_s3 * fuite + s2 * power));
    [s] s3=0 & pot_s3 > threshold_s3 ->  (s3'=1) & (pot_s3'=floor(pot_s3 * fuite + s2 * power));
    [s] s3=1 -> (s3' = 0) & (pot_s3' = 0);

endmodule

module S2

    s2 : [0..1] init 0;        // 0 = inactif et 1 = spike
    pot_s2 : [0..200] init 0;  // potential of the neuron

    [s] s2=0 & pot_s2 <= threshold_s2 -> (pot_s2'=floor(pot_s2 * fuite + s1 * power));
    [s] s2=0 & pot_s2 > threshold_s2 ->  (s2'=1) & (pot_s2'=floor(pot_s2 * fuite + s1 * power));
    [s] s2=1 -> (s2' = 0) & (pot_s2' = 0);

endmodule

module S1

    s1 : [0..1] init 0;       // 0 = inactif et 1 = spike
    pot_s1 : [0..200] init 0; // potential of the neuron

    [s] s1=0 & pot_s1 <= threshold_s1 -> (pot_s1'=floor(pot_s1 * fuite + s0 * power));
    [s] s1=0 & pot_s1 > threshold_s1 -> (s1'=1) & (pot_s1'=floor(pot_s1 * fuite + s0 * power));
    [s] s1=1 -> (s1' = 0) & (pot_s1' = 0);

endmodule

module initialisation
	s0 : [0..1] init 0;
	[s] s0=0 -> 1:(s0' = 1);
	[s] s0=1 -> 1:(s0' = 0);
endmodule


